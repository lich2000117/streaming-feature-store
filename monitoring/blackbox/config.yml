# Blackbox Exporter Configuration
# Defines probes for monitoring external endpoints

modules:
  # HTTP 2xx probe - for general health checks
  http_2xx:
    prober: http
    timeout: 5s
    http:
      method: GET
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      follow_redirects: true
      preferred_ip_protocol: "ip4"
      ip_protocol_fallback: false
      fail_if_ssl: false
      fail_if_not_ssl: false
      tls_config:
        insecure_skip_verify: false
      headers:
        User-Agent: "Blackbox-Exporter/1.0"
        Accept: "application/json,text/html"

  # HTTP POST probe - for API endpoints
  http_post_2xx:
    prober: http
    timeout: 10s
    http:
      method: POST
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202]
      follow_redirects: true
      preferred_ip_protocol: "ip4"
      headers:
        Content-Type: "application/json"
        User-Agent: "Blackbox-Exporter/1.0"
      body: |
        {
          "card_id": "card_health_check",
          "transaction_amount": 100.0
        }

  # HTTP probe with basic auth
  http_auth:
    prober: http
    timeout: 5s
    http:
      method: GET
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      follow_redirects: true
      preferred_ip_protocol: "ip4"
      basic_auth:
        username: "monitoring"
        password: "password"

  # ICMP probe for network connectivity
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"
      source_ip_address: ""
      payload_size: 64
      dont_fragment: false

  # TCP probe for port connectivity
  tcp_connect:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      source_ip_address: ""
      query_response:
        - expect: ""

  # DNS probe
  dns:
    prober: dns
    timeout: 5s
    dns:
      query_name: "localhost"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []
      validate_authority_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []
      validate_additional_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []

  # gRPC probe (if needed for services)
  grpc:
    prober: grpc
    timeout: 5s
    grpc:
      service: "health"
      tls: false
      tls_config:
        insecure_skip_verify: false

  # Custom inference API health probe
  inference_health:
    prober: http
    timeout: 10s
    http:
      method: GET
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200]
      follow_redirects: false
      preferred_ip_protocol: "ip4"
      headers:
        User-Agent: "HealthCheck-Monitor/1.0"
        Accept: "application/json"
      fail_if_body_not_matches_regexp:
        - '"status":\s*"healthy"'

  # MLflow health probe
  mlflow_health:
    prober: http
    timeout: 15s
    http:
      method: GET
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 404]  # MLflow might return 404 for root
      follow_redirects: true
      preferred_ip_protocol: "ip4"
      headers:
        User-Agent: "MLflow-HealthCheck/1.0"

  # Redis connectivity probe via HTTP
  redis_health:
    prober: tcp
    timeout: 5s
    tcp:
      preferred_ip_protocol: "ip4"
      query_response:
        - send: "PING\r\n"
        - expect: "PONG"
